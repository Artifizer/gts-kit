# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/web/package*.json ./apps/web/
COPY packages/shared/package*.json ./packages/shared/
COPY packages/layout-storage/package*.json ./packages/layout-storage/
COPY packages/fs-adapters/fs-adapter-web/package*.json ./packages/fs-adapters/fs-adapter-web/

# Install dependencies
RUN npm install

# Copy source code and tsconfig files
COPY apps/web ./apps/web
COPY packages/shared ./packages/shared
COPY packages/layout-storage ./packages/layout-storage
COPY packages/fs-adapters/fs-adapter-web ./packages/fs-adapters/fs-adapter-web
COPY packages/fs-adapters/types.ts ./packages/fs-adapters/
COPY tsconfig.json ./
COPY packages/shared/tsconfig.json ./packages/shared/
COPY packages/layout-storage/tsconfig.json ./packages/layout-storage/

# Build shared packages first (with type definitions)
RUN npm run build:layout-storage
RUN npm run build:shared

# Then build web app
RUN npm run build:web

# Production stage - serve with nginx
FROM nginx:alpine

# Install envsubst for runtime config
RUN apk add --no-cache gettext

# Copy built web app
COPY --from=builder /app/apps/web/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Copy entrypoint script
COPY docker/docker-entrypoint-web.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

EXPOSE 80

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]
